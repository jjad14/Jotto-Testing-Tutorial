Mocking React Methods
---------------------

In this lecture, we're going to talk about Mock's and how they're used in jest.

We're going to use them in this section when we start testing hooks.

So what is a mock function?

A mock function is a fake function that that runs instead of a real function.

It can run alternate code or it can just act as a placeholder.

When you specify that you want to mock a particular function for a test, jest will replace the real function with your mock.

So when the test code, it runs your component code and if it encounters your actual function, it won't run that function.

Instead, what it will run is your mock function.

So why would you want to mock?

There are three main reasons.

The first is to keep the real function from running during the course of your tests. This prevents side effects like network calls. Imagine your actual code is making a network call to say, submit an order. You wouldn't want your test to submit an order every time there was a test.

Another reason to mock is to spy on a function to see when it's called or with which arguments. So perhaps you want to know that when a user takes a particular action that a particular function will run with a set of arguments. You can do that by mocking the function and then checking to see that it was called with the correct arguments.

Finally, you can provide return values for the function to set up test conditions, so this is something we might do with the useState hook. We might say we want the useState hook to return this value for the state. And that will be the initial starting condition for the test that the state has that particular value.

I want to make a note about how I am going to be mocking react methods for this course.

I am going to reset the properties on the react module to replace those properties or methods with Mock's, I'll go into more detail on this later, but basically I'm going to replace the useState property for react with my mock.

In order for this to work, we will need to make sure we don't destructure any imports on react in our production code.

import React from 'react';

const [state, setState] = React.useState();

So, for example, if we want to mock you state here, we will import, just react and when we run useState will run it as eact.useState, the method that we use for mocking will work with this code.

import { useState } from 'react';

const [state, setState] = useState();

It will not work if we destructure useState. If we destructure use state from our import and use it like this, then the mocking method we're going to use here will not work.

Now I know some people really much prefer structured imports, and so I will give you a way to mock using that.

But I'm just going to give that as an aside. And the code that I'm going to write is going to use this method.


Note: If you change the import (inside the actual component) from 

import React from 'react';

to

import { useState } from 'react';

and leave the test file the way it is, then the tests will pass.

But if you change the import to 

import React, { useState } from 'react'.

The tests will fail.

Common Questions about Mocking React Methods
--------------------------------------------

In this lecture, I want to take a moment to talk about some common questions that I've gotten about mocking  useState, the first question I'd like to discuss is what if you wanted to destructure useState. 

So this has trade offs the way anything does, the pros of destructuring useState on import is that your production code is cleaner, but your test code is more complicated.

Now, neither destructuring on import or not destructuring on import is going to take care of my next question that I get commonly, which is what if I have multiple use state statements?

What if I have a lot of pieces of state in the same component?

I have two possibilities for this, one is to use useReducer to consolidate your pieces of state. I will discuss useReducer in the context portion of the course. This is the best solution if you'd like to unit test your component.

The other option is to skip the unit tests and go straight to the functional tests, and that way you'll be testing the effects of any changes to your state rather than testing whether or not your state is getting updated.

Introduction to Functional Tests
--------------------------------

In this section, we are going to write a series of functional tests for our app, as you'll recall, functional tests, look at a user flow, what a user does and how the app changes from a user perspective.

This is independent of our code, independent of how we've implemented our app.

This means the functional tests are the same, regardless of whether we implement the app and redux or context.

So that's what we're going to do for this section. 

For this lecture, we're just going to update app.test.js from the default that comes with create-react-app.

Jest methods: .only() .skip() and .todo()
------------------------------------------
Jest has some methods for us that we can use to determine which tests will actually run.

So we can use methods on the test and describe global.

.only() 

only run this test or described that has the DOT only specified and this is on a per file basis. So it's going to run all of the files that it needs to run. But within the file, it's only going to run that one test that you've designated with only.


.skip() 

Dot, skip is the inverse, it will run all of the tests except for the one with Dot Skip specified. 

So this is good for isolating tests, sometimes I do this when my tests are failing and I only want to rerun that one test that's failing or skipping tests, which is what we're going to do here to make sure that these tests don't run until we're ready for them.

.todo()

There's also a third method called todo, and that's to remind yourself to write a particular test later.

I don't use this so much in test driven development, but as long as I'm talking about .only and .skip, I'll demonstrate .todo as well.

Also, .todo only works with test() NOT describe, and again it is to remind yourself of tests that you might want to do in the future.

Testing Axios
----------------
We will test Axios using Moxios.

Let's talk a little more about is how it works and why we're going to use it, the server is necessary for the actual app. That's where we're going to get the random secret word. But we don't want to test the server when we're testing our app.

We want to isolate our tests so that if the test fails, we know that it's our app failing and not the server or the connection to the server.

Using Moxios lets us test our app without testing the server and actually even lets us test our app without even running the server or without the server even having been written.

So let's take a look at how that works.

The way it works is the test installs moxios, this lets Axios know to send requests to moxios instead of sending them to HTTP.

The test then specifies what moxios should respond with.

The test calls the action creator, and when the action creator calls Axios, Axios uses moxios instead of HTTP for the request, just like we asked it to, then the action creator receives that moxios response that we specified in the test and uses that when it runs the rest of the action creator.

I'm going to dive into some moxios syntax here, but of course we'll be going over this again as we write the actual code.

So for the moxios syntax, the test is going to call moxios.install(), which sets moxios as the Axios adapter, that is the functionality of moxios, that is its reason for existence.

This route's any axios requests to moxios instead of HTTP.

If you're using an Axios instance in your app, you can pass that as an argument to moxios install. 

That will use your configured settings and it will make sure that any calls that you make to the instance get routed to moxios.

If you are not using an instance, just leave that parameter blank and your axios calls will go to moxios.

Then during the test, you'll call moxios.wait(), this takes a callback, it watches for axios calls and then it sends a response using the callback that you specified as the argument to wait.

const request = moxios.requests.mostRecent();

So that callback will get the most recent request using the syntax you see here, moxios.requests.mostRecent and since our test is only making one request, the request that we are concerned about is going to be the most recent.

request.respondWith({
    status: 200,
    response: secretWord
})

And then we'll specify the response using this request to respond with method.

Testing Async Functions
------------------------

In this lecture, I want to talk about how we're going to go about testing an asynchronous function, getSecretWord is asynchronous or it will be when we write it, it's going to return a promise. And that promise is going to be what's returned from Axios.

The way our tests work is we will call get secret word, and then we will put an assertion in a .then() call back from the get secret word response.

That way we can be sure that the assertion runs after the promise resolves because the .then() callback only runs after the promise resolves.

There's a lot of asynchronicity here, both our Axios call is going to be asynchronous and we're also dealing with asynchronicity with our moxios.wait() call back.

So it's more important than ever to see our tests fail and to make sure that they're actually working.

It's very easy to make a mistake such that the tests complete before the asynchronous action is completed.

So let's take a look at how this can lead to passing tests, even though they have assertions that fail.

If you're not careful, the test can exit before your promise resolves.

So the test function can start the asynchronous call. But the way JavaScript works is that it's completely possible for that test function to finish before that promise resolves.

Now, you're definitely going to be running your assertion after the promise resolves, but if the assertion runs after the test function has completed, that's no good because the test function is checking when it completes whether or not any errors were thrown and if no errors were thrown. By the time the test function completes, it's going to give you a pass, even if the assertion runs later and throws an error.

This is why it is so important to make sure that you can see your tests fail, if you see your tests fail, you know that it's running that assertion before the function is complete.


So, we used moxios to test Axios without actually going to the server, Moxios configures Axios. It configures the Axios adapter to use moxios and not HTTP, which means that Axios will send its requests to moxios and not HTTP.

Then in our tests, we can write what we want moxios to respond, and that will just mimic the server response.

This is a way of being able to test action creators that use axios without having to have the server running.

Mocking Modules with Jest
-------------------------

Before we get started in this section, I want to take a moment to talk about how to mock module's in Jest.

So up until now in this course, we've mocked pieces of modules or methods from modules individually, for example, we mocked react use state, and we did this by overriding the used state method on react.

We did this individually in some test files and not in others, this was reasonable because sometimes we wanted to mock used state and sometimes we wanted to let it run if we wanted to test functionality.

However, get secret word is something we are going to want to mock everywhere.

We never want to go across the network except maybe for end to end testing, which we're not covering in this course.

So for this, we are going to mock this module, the module that contains get secret word, we're going to mock that globally so that it will automatically be mocked for all of our files.

If we want to mock a module globally, we can use a mock file, so a global mock file, it can be used by any test file.

You put it in a special directory with a special name that's to underscores and then the word Mock's and then two more underscores.

And this is useful if you want to mock every test you run or almost every test.

The test file will import from that Mock's file instead of the actual module, unless you explicitly tell it not to.

The location of the Mock's folder depends on whether you are marking a node module, something you installed or an app module for your project.

For a node module, it's going to be at the same level as the node_modules folder.

For Project Module's, it's at the same level as the actual module, so here inside the source directory, if we wanted to mock our helpers.js module, then our Mock's directory would be at the same level as the module we wanted to mock. And then inside we would have our mock module.

That's not the only difference between mocking node modules and project modules.

You have your Mock's file that provides the mocks in either case.

If you were mocking a node module, for example, react, this is going to mock automatically for all of your test files unless you explicitly unmock it.

So this is a situation where you need to opt out if you decide you do not want to mock or react.js, you have to say so.

Otherwise it's going to be mocked.

However, if you're mocking a project module like the helper.js I had in my last slide, this one will not mock unless you explicitly specify at the top of your test file that you want to mock this module.

So this one is an opt in. Node modules automatically, unless you opt out, project modules don't mock unless you opt in.

Finally, I want to make a couple notes about mocking with Create React app.

One is that there is an issue with the location of node modules, Mock's that Mock's directory actually needs to be at the top level of your source directory and not the same level as node modules like it is for all other types of projects.

Here's a link to the issue where you can find out more about it and see if it has been fixed or not.

https://github.com/facebook/create-react-app/issues/7539

Also, this is something that has bitten me in the behind several times, mocks automatically reset before every test.

This is a problem if you have specified a return value in your mock function, it is not going to be a problem here because here we are simply going to be spying on the function and we're not actually going to be specifying a return value.

But if you do specify a return value, it is going to be reset before every test.

This is a link to the issue and the specific comment where you can get around it.

https://github.com/facebook/jest/issues/9131#issuecomment-668790615

Choice point: Redux or React Context?
-------------------------------------

At this point in the course, you have a choice, some of you might be more interested in testing redux

Some people might be more interested in testing, react context for the same reasons.

And some people might be interested in both because, you know, the more knowledge, the better.

So here is the point where you get to make a decision.

Redux and react context are two ways to share state among components in your react apps.

So sometimes there are props or a state that's needed by a lot of different components and you want to be able to share that among many different components.

There are a couple of reasons why.

One would be a global setting that almost every component needs. So something like the language that the user has chosen, each component is going to need to know which language to use for its strings or perhaps a visual theme.

So perhaps a user can choose a light theme or a dark theme, and every component is going to need to know which theme to display.

Also, you might use shared state for deeply nested components that need access to a particular piece of shared state, but the ancestors don't.

Now, react context and redux are not the only choices for shared state, they're just the ones that I discuss in this course.

And I do get questions about when to use which. 

In general context, context works great for simple apps.

But Redux has better tools for more sophisticated apps so it can do things like optimize if you're going to have updates very frequently.

It also has good developer tools for debugging, for example, and redux supports middleware so you can automatically run code when any action is fired.

For example, if you want to log events to an analytics pipeline.

Finally, I want to talk about how artificial it is to use even context on our Jotto app, it's just too simple to need shared state, really only has two levels of components.

There's our app component. And then underneath that, there's a second level of components like congrats and input.

So we could pretty easily keep all of the state as internal app level state and just pass the state and any setter functions as props.

This is a simple app, it's good for learning so that you don't have to track too much complexity about the app and the shared state is artificial, but I'm using it to demonstrate how you would test shared state in a case where it really is needed.

Intro to Redux Testing
-----------------------

I wanted to take a moment in this lecture to summarize what we did in this section, I'm calling it simple redux because it doesn't involve async action creators or thunk, but simple is a relative term.

So the first thing we did was we tested an action creator and a reducer, a simple action creator is a function returning an object so we can test it as we would any other function.

Same thing with a reducer. It's a function that returns state. So, again, we can test it as a function.

Then we looked at setting state in tests or creating tests for components that use redux hooks.

We created a store factory utility, and this gave us the ability to create a store for testing that uses the same reducer as our app.

Eventually we'll add middlewares, again, that will be accessed easily by both our App Store and by our testing store.

We wrapped our input component component in provider and we used Mount.

We wrapped the component in the provider so we wouldn't get errors about using use selector outside a provider.

We could also have mocked use selector, but we chose not to do that because using provider is less complicated and it's closer to our actual production code.

We needed to use Mount so that we could access the input component within the provider.

Then that store that we created using store factory, we passed it as a prop to our provider, we can create that store with an initial state and then our input component inside will have access to that state.

Another choice we made, which I didn't discuss beforehand, was that we decided to use an actual redux store and not a mock store, there is a package called redux-mock-store, and an advantage of this package is it can test intermediate actions.

So if you have a series of actions where it goes into some sort of loading stage while you're waiting for Ajax and then completes that loading state at the end redux-mock-store can tell you all of the actions that were fired before you got to the final state, whereas the actual store can only look at that final state.

But the mock store cannot test changes to the state. It only shows you the series of actions. So the two of them have different advantages.

A final advantage of the actual store is that it's closer to the app. Any time you're mocking, you're one step removed from the app and you're running the risk of testing something that doesn't really apply to the app itself.

Testing Redux Thunk
--------------------

Redux Thunk is a middleware for redux, and it provides additional functionality.

It's a way for us to have more flexibility in our action creators instead of returning an action object that the action creators will return a function.

So that's what I thunk is it's a function that returns a function.

Because we're going to be returning a function instead of an action object, we have the ability now to dispatch multiple actions within that function.

Another thing that Thunk allows us to do is access the current state, and that's going to be very useful in this case.

So our guess word action creator will return a function that always dispatches guests word and conditionally dispatches correct guests, depending on whether or not the word is correct.

Plus, within that function, we can access the success piece of state so we can determine whether or not we need to dispatch correct guests.

Thunk Testing Summary
---------------------

If you're doing integration testing on a thank you, will want to create a store with an initial state based on what you're testing.

Dispatch your thunk action creator. 

And then check to see whether your state has been updated the way you expected it to be from your action creator.

Now, you may be thinking to yourself, what about those functional tests that rewrote way back when before we split off between redux and context, aren't these just the same as the tests we already wrote?

After all, we're trying no words guessed and we're trying some words guessed and we're trying to guess the secret word.

I mean, this sounds awfully similar. And they are these tests are quite similar to the tests that we just wrote.

The difference is these actually include the wiring up of the components.

Now you can choose what level of testing you'd like to do.

You could do more than what we've done already and unit test your action creators and your reducers.

Or you could do less than what we've done this section, not test the state from your action creators and producers and simply skip straight to the functional tests.

I'm showing you how to do a variety of levels so you can decide which you think it works best for you and your team.


